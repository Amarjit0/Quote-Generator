{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_React$Component","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","state","advice","textColor","bgColor","fetchAdvice","axios","get","then","response","data","slip","_this$generateRandomC","generateRandomColors","setState","catch","error","console","log","textColors","bgColors","Math","floor","random","_inherits","_createClass","key","value","_this$state","React","createElement","className","style","backgroundColor","color","onClick","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yQAsDeA,SAlDN,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,YAAAC,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GA8BN,OA9BMR,EAAAS,YAAAP,MAAAH,EAAAW,YAAAb,IAAAc,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,MAEPQ,MAAQ,CACNC,OAAQ,GACRC,UAAW,GACXC,QAAS,IACVjB,EAMDkB,YAAc,WACZC,IAAMC,IAAI,qCACPC,KAAK,SAACC,GAAa,IACVP,EAAWO,EAASC,KAAKC,KAAzBT,OAAMU,EACiBzB,EAAK0B,uBAA5BV,EAASS,EAATT,UAAWC,EAAOQ,EAAPR,QACnBjB,EAAK2B,SAAS,CAAEZ,SAAQC,YAAWC,cAEpCW,MAAO,SAACC,GACPC,QAAQC,IAAIF,MAEjB7B,EAED0B,qBAAuB,WACrB,IAAMM,EAAa,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WACrEC,EAAW,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAGzE,MAAO,CAAEjB,UAFSgB,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAW3B,SAE/CY,QADJgB,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAAS5B,WAE9DL,EAiBA,OA/CMqC,YAAAxC,EAAAC,GA8BNwC,YAAAzC,EAAA,EAAA0C,IAAA,oBAAAC,MAAA,WArBCtC,KAAKgB,gBACN,CAAAqB,IAAA,SAAAC,MAAA,WAsBQ,IAAAC,EACgCvC,KAAKY,MAApCC,EAAM0B,EAAN1B,OAAQC,EAASyB,EAATzB,UAAWC,EAAOwB,EAAPxB,QAE3B,OACEyB,IAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,gBAAiB7B,IAC7CyB,IAAAC,cAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEE,MAAO/B,IACpC0B,IAAAC,cAAA,MAAIC,UAAU,WACX7B,GAEH2B,IAAAC,cAAA,UAAQC,UAAU,SAASI,QAAS9C,KAAKgB,aACvCwB,IAAAC,cAAA,YAAM,yBAKf9C,EA/CM,CAAS6C,IAAMO,YCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAjC,KAAAgC,EAAAE,KAAA,UAAqBlC,KAAK,SAAAmC,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxB,IAAAC,cAACD,IAAMyB,WAAU,KACfzB,IAAAC,cAAC9C,EAAG,QAORqD","file":"static/js/main.73a4e2dc.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends React.Component {\n\n  state = {\n    advice: '',\n    textColor: '',\n    bgColor: '',\n  };\n\n  componentDidMount() {\n    this.fetchAdvice();\n  }\n\n  fetchAdvice = () => {\n    axios.get('https://api.adviceslip.com/advice')\n      .then((response) => {\n        const { advice } = response.data.slip;\n        const { textColor, bgColor } = this.generateRandomColors();\n        this.setState({ advice, textColor, bgColor });\n      })\n      .catch ((error) => {\n        console.log(error);\n      })\n  }\n\n  generateRandomColors = () => {\n    const textColors = ['#e91e63', '#9c27b0', '#2196f3', '#4caf50', '#ff9800', '#795548'];\n    const bgColors = ['#F9EBEA', '#E8F8F5', '#F4ECF7', '#FDEDEC', '#FEF9E7', '#EAECEE'];\n    const textColor = textColors[Math.floor(Math.random() * textColors.length)];\n    const bgColor = bgColors[Math.floor(Math.random() * bgColors.length)];\n    return { textColor, bgColor };\n  }\n\n  render() {\n    const { advice, textColor, bgColor } = this.state;\n\n    return (\n      <div className=\"app\" style={{ backgroundColor: bgColor }}>\n        <div className=\"card\" style={{ color: textColor }}>\n          <h1 className=\"heading\">\n            {advice}\n          </h1>\n          <button className=\"button\" onClick={this.fetchAdvice}>\n            <span>Give Me Advice</span>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}